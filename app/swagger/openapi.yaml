openapi: 3.0.0
info:
  title: Doctor Appoinment app
  version: 1.0.0
  description: documentation of doc Appoinment app
servers:
  - url: 'http://localhost:3000/api'
tags:
  - name: Auth
    description: Api related to authentication
  - name: User
    description: Api related to user operations (authorization needed).
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: User login to the Doctor appoinment app
      requestBody:
        description: Request body for login API
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email address of the user.
                  example: johndoe@example.com
                password:
                  type: string
                  description: Password of the user
                  example: '**************'
                  minLength: 6
      responses:
        '201':
          description: Success Response
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - success
                      - message
                      - access_token
                    properties:
                      success:
                        type: boolean
                        example: true
                      access_token:
                        type: string
                        example: eyjnkdjnsd****.eyjsnkdjskd***.eyj*****
                      message:
                        type: string
                        example: user logged in succsessfully
                  - type: object
                    required:
                      - success
                      - message
                      - requires_otp
                    properties:
                      success:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: User logged in successfully. OTP sent to email.
                      requires_otp:
                        type: boolean
                        example: true
              examples:
                NormalLogin:
                  summary: Login without Mfa
                  description: login user that not enabled mfa option
                  value:
                    success: true
                    message: user logged in succsessfully
                    access_token: eyJhbGciOiJIUzI1NiIsInR...
                OtpLogin:
                  summary: Login with Mfa
                  description: login user that enabled mfa option
                  value:
                    success: true
                    message: User logged in successfully. OTP sent to email.
                    requires_otp: true
        '400':
          description: Validation Error Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: correspond error message
        '401':
          description: Invalid Credential Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              examples:
                InvalidEmail:
                  summary: Invalid Email Address
                  description: The provided email address does not match any user in the system.
                  value:
                    success: false
                    message: Invalid email
                InvalidPassword:
                  summary: Incorrect Password
                  description: The provided password does not match the one associated with the user account.
                  value:
                    success: false
                    message: Invalid password
        '500':
          description: Internal Server Error Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              examples:
                EmailSendFailure:
                  summary: OTP email failed
                  description: 'Login verified, but failed to send OTP email.'
                  value:
                    success: false
                    message: 'Login verified, but failed to send OTP email. Try again or contact support.'
                GenericServerError:
                  summary: Unexpected server error
                  description: Generic internal server error during login.
                  value:
                    success: false
                    message: Something went wrong. Please try again later.
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register
      description: User registration to the doctor appoinment app
      requestBody:
        description: Request body for Register API
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - role
              properties:
                username:
                  type: string
                  description: name of the user.
                  example: johndoe
                role:
                  type: string
                  description: user role.
                  example: user
                email:
                  type: string
                  description: Email address of the user.
                  example: johndoe@example.com
                password:
                  type: string
                  description: Password of the user
                  example: '**************'
                  minLength: 6
      responses:
        '201':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully. OTP sent to email.
        '400':
          description: Validation Error Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: correspond error message
        '409':
          description: Conflict - User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User already exists with this email
        '500':
          description: Internal Server Error Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              examples:
                EmailSendFailure:
                  summary: OTP email failed
                  description: 'registration completed, but failed to send OTP email.'
                  value:
                    success: false
                    message: User registered successfully. failure in OTP sent to email.
                GenericServerError:
                  summary: Unexpected server error
                  description: Generic internal server error during registration.
                  value:
                    success: false
                    message: Something went wrong. Please try again later.
  /auth/verify-otp:
    post:
      tags:
        - Auth
      summary: Register
      description: User registration to the doctor appoinment app
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            example: johndoe@gmail.com
      requestBody:
        description: Request body for Register API
        content:
          application/json:
            schema:
              type: object
              required:
                - otp
              properties:
                otp:
                  type: string
                  example: av5d39
      responses:
        '201':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                  - access_token
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: user registered succsessfully
                  access_token:
                    type: string
                    example: eyjnkdjnsd****.eyjsnkdjskd***.eyj*****
        '400':
          description: 'Bad Request - Missing or invalid input (e.g., email or OTP is missing, invalid, or expired)'
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              examples:
                missingEmail:
                  summary: Missing email
                  value:
                    success: false
                    message: Email is required
                missingOtp:
                  summary: Missing OTP
                  value:
                    success: false
                    message: OTP is required
                invalidOtp:
                  summary: Invalid OTP
                  value:
                    success: false
                    message: Invalid OTP
                expiredOtp:
                  summary: Expired OTP
                  value:
                    success: false
                    message: OTP has expired
        '404':
          description: Not Found - The requested user does not exist
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User not found
  /user/get-user:
    get:
      tags:
        - User
      summary: get user
      description: get user details by access_token
      responses:
        '200':
          description: success responses
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                  - user
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User details fetched successfully
                  user:
                    type: object
                    example:
                      id: userId
                      name: John Doe
                      email: john@example.com
                      role: user
        '401':
          description: Authentication required. Please provide a valid access token in the Authorization header
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Authentication required
        '404':
          description: user not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: user not found
  /user/profile:
    put:
      tags:
        - User
      summary: update user
      description: |
        Allows  updates of user fields. Provide one or more fields (even full) to update.
        Fields not included will remain unchanged.
      requestBody:
        description: Request body for update profile
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe@example.com
                email:
                  type: string
                  example: johndoe@example.com
                phone:
                  type: string
                  example: johndoe@example.com
                address:
                  type: string
                  example: johndoe@example.com
                gender:
                  type: string
                  example: johndoe@example.com
                dob:
                  type: string
                  example: johndoe@example.com
            examples:
              emailOnly:
                summary: email
                description: update user email only
                value:
                  email: johndoe@test.com
              emailandUsername:
                summary: username & email
                description: update user email and username
                value:
                  email: johndoe@test.com
                  username: johndoe
              allfield:
                summary: allfield
                description: update all fields of user
                value:
                  email: johndoe@test.com
                  username: johndoe
                  phone: '428394803804'
                  address: 'new york, central area near la'
                  gender: male
                  dob: '2005-04-16'
      responses:
        '200':
          description: success responses
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                  - user
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User details fetched successfully
                  user:
                    type: object
                    example:
                      id: userId
                      name: John Doe
                      email: john@example.com
                      role: user
                      etc: more data about user
        '400':
          description: if we didn't pass payload
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Request body is missing or malformed
        '401':
          description: Authentication required. Please provide a valid access token in the Authorization header
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Authentication required
        '404':
          description: user not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - message
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: user not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
